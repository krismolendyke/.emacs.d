#+TITLE: Literate =.emacs.d=
#+OPTIONS: toc:nil num:nil

#+BEGIN_QUOTE
[[http://www.literateprogramming.com/][Literate programming]] is a methodology that combines a programming language
with a documentation language, thereby making programs more robust, more
portable, more easily maintained, and arguably more fun to write than programs
that are written only in a high-level language. The main idea is to treat a
program as a piece of literature, addressed to human beings rather than to a
computer. The program is also viewed as a hypertext document, rather like the
World Wide Web. (Indeed, I used the word WEB for this purpose long before CERN
grabbed it!) -- [[http://www-cs-faculty.stanford.edu/~uno/lp.html][Donald Knuth]]
#+END_QUOTE

All configuration described here is performed in an =after-init-hook=
function.

#+TOC: headlines 2

* Build Emacs
  :PROPERTIES:
  :CUSTOM_ID: build-emacs
  :END:

  I primarily use Emacs locally on Apple hardware.  Most, if not all, of the
  remote editing that I do is done via =tramp=.  I keep an eye on the [[fhttp://git.savannah.gnu.org/cgit/emacs.git/log/][log]] at
  the bleeding edge [[http://git-scm.com/][git]] mirror of the official Emacs [[http://bazaar.canonical.com/en/][bzr]] repo.  When something
  interesting lands there I will build a fresh Emacs installation via [[http://brew.sh/][Homebrew]]
  and try it out.

  #+BEGIN_SRC sh
    brew info emacs
  #+END_SRC

  I install Emacs with the following options.

  #+BEGIN_SRC sh
    time brew install emacs --cocoa --srgb --HEAD --use-git-head
  #+END_SRC

  If there is an existing installation it needs to be removed first.

  #+BEGIN_SRC sh
    brew uninstall emacs
  #+END_SRC

** Emacs Source Directory

   =source-directory= is helpful to have set properly when exploring built-in
   /C functions/ via =find-function=.

   Finding the source code directory via Homebrew can be done with the
   following command:

   #+BEGIN_SRC sh
     brew --cache
   #+END_SRC

   /Note/: =source-directory= must be set during Emacs initialization time to
   persist.  See =init.el=.

* TODO Generate and Publish =custom.org= to GitHub

  Include =post-commit= hook.

* Customization

  I don't make much use of the [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Customization.html#Customization][Customization]] interface.  By default it dumps
  its settings into =init.el= and I don't want to see them there.  A few
  packages that I use do rely on customization so I do need it to be loaded.

  #+BEGIN_SRC emacs-lisp
    (setq custom-file (expand-file-name ".emacs-custom.el" user-emacs-directory))
    (load custom-file)
  #+END_SRC

* Global GNU Emacs Key Bindings

  These global key bindings override /built-in/ functions only.
  Package-specific or custom function defunition key bindings are made in
  their own dedicated sections where other specific settings are made.

** Unset

   #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "<f11>"))
     (global-unset-key (kbd "C-h"))
     (global-unset-key (kbd "C-q"))
     (global-unset-key (kbd "C-z"))
     (global-unset-key (kbd "M-`"))
     (global-unset-key (kbd "M-c"))
     (global-unset-key (kbd "M-h"))
     (global-unset-key (kbd "M-u"))
   #+END_SRC

** Set

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c DEL") 'join-line)
     (global-set-key (kbd "C-h") 'delete-backward-char)
     (global-set-key (kbd "C-j") 'join-line)
     (global-set-key (kbd "C-x C-t") 'toggle-frame-fullscreen)
     (global-set-key (kbd "H-h") 'help-command)
     (global-set-key (kbd "H-h H-f") 'find-function)
     (global-set-key (kbd "H-h H-v") 'find-variable)
     (global-set-key (kbd "M-+") 'text-scale-adjust)
     (global-set-key (kbd "M-.") 'imenu)
     (global-set-key (kbd "M-SPC") 'delete-horizontal-space)
     (global-set-key (kbd "M-`") 'other-window)
     (global-set-key (kbd "M-h") 'backward-kill-word)
   #+END_SRC

* Global =defuns.el= Key Bindings

  These global key bindings are for functions that I've defined in =defuns.el=
  that have been previously loaded during initialization in =init.el=.

** Set

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x 0") 'delete-window-and-balance)
     (global-set-key (kbd "C-x 3") 'split-window-right-and-balance-and-go-there-and-switch-buffer)
     (global-set-key (kbd "C-x t") 'toggle-theme)
     (global-set-key (kbd "H-l") 'ifl-region-or-query)
   #+END_SRC

* Kris Defaults

  This is a bunch of stuff that I just dumped here and need to go through yet.

  Do not back up files.

  #+BEGIN_SRC emacs-lisp
    (setq make-backup-files nil
          auto-save-default nil)
  #+END_SRC

  Show the active region and delete it when selected if a character is
  inserted.

  #+BEGIN_SRC emacs-lisp
    (transient-mark-mode t)
    (delete-selection-mode 1)
  #+END_SRC

  "Electric" indentation is generally what I consider to be sensible.

  #+BEGIN_SRC emacs-lisp
    (electric-indent-mode)
  #+END_SRC

  Splitting windows horizontally makes more sense on all of the
  wide screen monitors I work on.

  #+BEGIN_SRC emacs-lisp
    (setq split-width-threshold 81)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    ;; What's going on here?
    (setq echo-keystrokes 0.1)


    ;; Where am I?
    (line-number-mode t)
    (global-hl-line-mode t)
    (column-number-mode t)
    (show-paren-mode t)

    ;; Do not break lines.  Truncate them.
    (setq-default truncate-lines t)

    ;; Automatically reload buffers when files change on disk.
    (global-auto-revert-mode 1)

    ;; Nag, nag, nag, nag...
    (put 'downcase-region 'disabled nil)
    (put 'upcase-region 'disabled nil)
    (put 'narrow-to-region 'disabled nil)
    (put 'narrow-to-page 'disabled nil)
    (put 'scroll-left 'disabled nil)
    (put 'scroll-right 'disabled nil)

    ;; Quit all that damn racket!
    (setq ring-bell-function 'ignore)

    ;; Make sure syntax highlighting is enabled.
    (global-font-lock-mode t)

    ;; y is the new yes.  n is the new no.
    (defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

* OS X

  These may be better suited split up to key bindings and/or a maybe
  input/mouse section?

  #+BEGIN_SRC emacs-lisp
    ;; I spend most of my time in OS X.
    (if (equal system-type 'darwin)
        (progn
          ;; Command as meta.
          (setq ns-command-modifier 'meta)

          ;; Option as hyper.
          (setq ns-option-modifier 'hyper)

          ;; fn as super.
          (setq ns-function-modifier 'super)

          ;; See https://github.com/Homebrew/homebrew/commit/49c85b89753d42cc4ec2fee9607a608b3b14ab33?w=1
          (setq ns-use-srgb-colorspace t)

          ;; Trackpad taming.
          (setq
           mouse-wheel-scroll-amount '(0.0001)
           mouse-wheel-progressive-speed nil
           scroll-step 1
           scroll-conservatively 10000
           auto-window-vscroll nil)

          ;; Trash.
          (setq trash-directory (expand-file-name "~/.Trash")
                delete-by-moving-to-trash t)))
  #+END_SRC

* Appearance

** Theme

   #+BEGIN_SRC emacs-lisp
     ;; Add themes.
     (dolist
         (theme (directory-files (expand-file-name "themes" user-emacs-directory) t "\\w+"))
       (when (file-directory-p theme)
         (add-to-list 'custom-theme-load-path theme)))

     ;; Tomorrow as a submodule.  It has a bunch of other editor support.
     (add-to-list 'custom-theme-load-path
                  (expand-file-name
                   "themes/tomorrow/GNU Emacs" user-emacs-directory))
     (add-to-list 'load-path (expand-file-name
                              "themes/tomorrow/GNU Emacs" user-emacs-directory))

     ;; These ports of Sublime Text 2 themes required a stupid shell script
     ;; to "install" them which I refuse to use.
     (add-to-list 'custom-theme-load-path
                  (expand-file-name
                   "themes/st2/themes" user-emacs-directory))

     (defvar light-theme 'tomorrow-day "The default lightly colored theme.")
     ;; Other good light-theme candidates: whiteboard

     (defvar dark-theme 'tomorrow-night-bright "The default darkly colored theme.")
     ;; Other good dark-theme candidates:
     ;; tomorrow-night hickey fogus dorsey wilson wombat zenburn

     (defun load-light-theme ()
       "Load a lightly colored theme for conditions when ambient light
     is bright."
       (interactive)
       (disable-theme (car custom-enabled-themes))
       (load-theme light-theme t)
       (set-face-background 'hl-line "AntiqueWhite2"))

     (defun load-dark-theme ()
       "Load a darkly colored theme for conditions when ambient light
     is dark."
       (interactive)
       (disable-theme (car custom-enabled-themes))
       (load-theme dark-theme t)
       (set-face-background 'hl-line "gray20")
       (set-face-background 'region "gray36"))

     (defun toggle-theme ()
       "Switch between the light and dark theme."
       (interactive)
       (if (member dark-theme custom-enabled-themes)
           (load-light-theme)
         (load-dark-theme)))

     ;; Load a dark theme by default.
     (load-dark-theme)
   #+END_SRC

*** TODO Try out [[https://github.com/bruce/emacs-spacegray-theme][Spacegray theme]]

** Cursor

   Disable blinking.

   #+BEGIN_SRC emacs-lisp
     (blink-cursor-mode 0)
   #+END_SRC

   If blinking is enabled the rate can be adjusted.

   #+BEGIN_SRC emacs-lisp
     (setq blink-cursor-interval 0.75)
   #+END_SRC

** Font

   #+BEGIN_SRC emacs-lisp
     (defun set--font (font-alist)
       "Set the font family and size to the given font alist of the
     format (family . point)."
       (set-frame-font (car font-alist))
       (set-face-attribute 'default nil :height (* 10 (cdr font-alist))))

     (defun set--font-from-list (l)
       "Set the font to first available font alist in the given list."
       (if (null l) nil
         (set--font (car l))
         (if (string= (caar l) (face-attribute 'default :family (selected-frame)))
             (caar l)
           (set--font-from-list (cdr l)))))

     (defvar font-list '(("Source_Code_Pro" . 11)
                         ("Glass_TTY_VT220" . 20)
                         ("Consolas" . 18)
                         ("Ubuntu_Mono" . 17)
                         ("Inconsolata" . 18)
                        ("DejaVu_Sans_Mono" . 18))
       "Ordered list of preferred fonts and sizes.")

     (set--font-from-list font-list)

     (defun set-font ()
       "Set a font from the `font-list'."
       (interactive)
       (let ((ignore-case completion-ignore-case))
         (unwind-protect
             (progn
               (setq completion-ignore-case t)
               (let ((font (completing-read "Font: " font-list)))
                 (set--font (assoc font font-list))))
           (setq completion-ignore-case ignore-case))))
   #+END_SRC

** Frame Height

   These functions were more useful before I began using the [[http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/desktop.el][=desktop=]] package
   and its [[http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/desktop.el?id=e78d7f87377e29ee7ed2dd7aaed40244f1edbf13#n397][=desktop-restore-frames=]] variable.

   #+BEGIN_SRC emacs-lisp
     (defun get-max-rows (pixel-height)
       "Return the maximum number of rows that will fit with this screen.
     Given a screen pixel height at the current frame character height, calculate
     the maximum number of rows that will fit with that height."
       (if (window-system)
           (/ pixel-height (frame-char-height))))

     (defun set-frame-height-to-max ()
       "Set the selected frame height to the maximum that will fit the current
     screen resolution."
       (if (window-system)
           (set-frame-height (selected-frame)
                             (get-max-rows (- (display-pixel-height) 44)))))

     (set-frame-height-to-max)
   #+END_SRC

** Fringe

   The "fringe" or "gutter" shows indicators for wrapped/extended lines,
   [[#flycheck][flycheck]], etc.

   #+BEGIN_SRC emacs-lisp
     (require 'fringe)
     (fringe-mode (cdr (assoc "half-width" fringe-styles)))
   #+END_SRC

** TODO Disable =linum-mode= when text scale is not zero

   The fringe text scale is adjusted with the rest of the buffer yet the
   fringe width is not adjusted.  If text scale is positive the line numbers
   get cut-off and not very useful.  There is [[http://stackoverflow.com/questions/9304192/emacs-linum-mode-and-size-of-font-unreadable-line-numbers][a hack that tries to address
   this situation]] but I'd just as soon disable line numbering when the text
   scale is large.

* ag

  [[https://github.com/ggreer/the_silver_searcher][The Silver Searcher]] is similar to =ack=, which in turn is similar to =grep=.

  #+BEGIN_SRC emacs-lisp
    (require 'ag)

    (setq ag-arguments
          '("--smart-case" "--nogroup" "--column" "--smart-case" "--stats" "--")
          ag-highlight-search t)

    (global-set-key (kbd "C-x C-a") 'ag-project)
  #+END_SRC

* auto-fill

  When to turn on auto-fill and set fill-column to a reasonable value.  This
  would probably be better dealt with by a data structure that maps mode hooks
  to fill-column values.

  #+BEGIN_SRC emacs-lisp
    (defun k20e/auto-fill-mode-hook ()
      (setq fill-column 78))

    (add-hook 'auto-fill-mode 'k20e/auto-fill-mode-hook)
  #+END_SRC

* autopair

  [[https://github.com/capitaomorte/autopair][Autopair]] automatically pairs braces, brackets, quotes, etc.

  #+BEGIN_SRC emacs-lisp
    (require 'autopair)

    (autopair-global-mode)
  #+END_SRC

* buffer-move

  Move the current buffer up/down/left/right easily.

  #+BEGIN_SRC emacs-lisp
    (require 'buffer-move)

    (global-set-key (kbd "<H-S-up>") 'buf-move-up)
    (global-set-key (kbd "<H-S-down>") 'buf-move-down)
    (global-set-key (kbd "<H-S-left>") 'buf-move-left)
    (global-set-key (kbd "<H-S-right>") 'buf-move-right)
  #+END_SRC

* TODO calendar

  Does setting these geolocation variables in a hook really make sense since
  they are the result of an asynchronous query and response parsing?

  #+BEGIN_SRC emacs-lisp
    (require 'geo-ip)
    (require 'url)

    (defun k20e/calendar-load-hook ()
      ;; Default location Philly.
      (setq
       calendar-latitude 39.9            ; 39.9525
       calendar-longitude -75.1          ; -75.163
       calendar-location-name "Philadelphia, PA")

      ;; Attempt to set location with a geo-ip query.
      (geo-ip-lat-lon-loc-ip
       #'(lambda (lat lon loc ip)
           (setq
            calendar-latitude lat
            calendar-longitude lon
            calendar-location-name loc))))

    (add-hook 'calendar-load-hook 'k20e/calendar-load-hook)
  #+END_SRC

* cider

  #+BEGIN_SRC emacs-lisp
    (require 'cider)
    (require 'paredit)

    (defun k20e/cider-mode-hook ()
      (cider-turn-on-eldoc-mode)
      (paredit-mode 1))

    (add-hook 'cider-mode-hook 'k20e/cider-mode-hook)

    (setq nrepl-hide-special-buffers t
          cider-repl-popup-stacktraces nil
          cider-repl-use-pretty-printing t
          cider-repl-history-file (expand-file-name "nrepl-history" k20e/dropbox-directory))
  #+END_SRC

* clojure-mode

  #+BEGIN_SRC emacs-lisp
    (require 'clojure-mode)
    (require 'clojure-test-mode)
    (require 'paredit)

    (defun k20e/clojure-mode-hook ()
      (paredit-mode 1))

    (add-hook 'clojure-mode-hook 'k20e/clojure-mode-hook)
  #+END_SRC

** Save buffers before loading or running tests

   Courtesy of Magnar Sveen's [[https://github.com/magnars/.emacs.d/blob/486e631801c84b018d90cf040d2170ef78045676/setup-clojure-mode.el][=setup-clojure-mode.el=]].

   #+BEGIN_SRC emacs-lisp
     (require 'cider-mode)
     (require 'clojure-test-mode)

     (defadvice clojure-test-run-tests (before save-first activate)
       (save-buffer))

     (defadvice cider-load-current-buffer (before save-first activate)
       (save-buffer))
   #+END_SRC

* compilation-mode

  #+BEGIN_SRC emacs-lisp
    (defun k20e/compilation-mode-hook ()
      (set-face-foreground 'compilation-error "tomato1"))

    (add-hook 'compilation-mode-hook 'k20e/compilation-mode-hook)
  #+END_SRC

* dired

  #+BEGIN_SRC emacs-lisp
    (require 'ido)
    (require 'autorevert)

    (defun k20e/dired-mode-hook ()
      (auto-revert-mode 1)
      (setq auto-revert-verbose nil)
      (set-face-foreground 'dired-flagged "tomato1")
      (set-face-attribute 'dired-flagged nil :strike-through t))

    (add-hook 'dired-mode-hook 'k20e/dired-mode-hook)

    ;; C-x C-d is normally bound to `ido-list-directory' which I rarely need and
    ;; often type when I intend to run `ido-dired'.
    (global-set-key (kbd "C-x C-d") 'ido-dired)
  #+END_SRC

* emacs-lisp-mode

  #+BEGIN_SRC emacs-lisp
    (require 'autopair)

    (defun k20e/emacs-lisp-autopair-hook ()
      ;; autopair `' when writing comments or strings.
      (push '(?` . ?')
            (getf autopair-extra-pairs :comment))
      (push '(?` . ?')
            (getf autopair-extra-pairs :string))
      (setq autopair-skip-whitespace 'chomp)
      (eldoc-mode))

    (add-hook 'emacs-lisp-mode-hook 'k20e/emacs-lisp-autopair-hook)
  #+END_SRC

* expand-region

  #+BEGIN_SRC emacs-lisp
    (require 'expand-region)

    (global-set-key (kbd "C-M-SPC") 'er/expand-region)
  #+END_SRC

* find-file-in-project

  #+BEGIN_SRC emacs-lisp
    (require 'find-file-in-project)

    (setq ffip-limit 8192
          ffip-find-options "-not -regex \".*/build.*\""
          ffip-full-paths t
          ffip-patterns (list "*.clj"
                              "*.conf"
                              "*.cron"
                              "*.css"
                              "*.el"
                              "*.html"
                              "*.js"
                              "*.json"
                              "*.md"
                              "*.org"
                              "*.py"
                              "*.rb"
                              "*.rst"
                              "*.sh"
                              "*.soy"
                              "*.txt"
                              "*.yml")
          ffip-prune-patterns (list ".git" "build"))

    (global-set-key (kbd "C-x o") 'find-file-in-project)
  #+END_SRC

* flycheck
  :PROPERTIES:
  :CUSTOM_ID: flycheck
  :END:

  #+BEGIN_SRC emacs-lisp
    (require 'flycheck)

    ;; Easier navigation for errors/warnings/etc.
    ;; ◀◀
    (global-set-key (kbd "<f7>") 'flycheck-previous-error)
    ;; ▶▶
    (global-set-key (kbd "<f9>") 'flycheck-next-error)

    (setq-default flycheck-pylintrc "pylintrc"
                  flycheck-check-syntax-automatically '(mode-enabled save))
  #+END_SRC

* flyspell

  First setup =ispell= to use [[#install-aspell][=aspell=]]:

  #+BEGIN_SRC emacs-lisp
    (setq-default ispell-program-name "aspell"
                  ispell-extra-args (list "--sug-mode=ultra"))
  #+END_SRC

  Then setup =flyspell= itself.  It requires  =ispell=.

  #+BEGIN_SRC emacs-lisp
    (require 'flyspell)

    ;; When to turn on flyspell-mode.
    (dolist (hook '(text-mode-hook))
      (add-hook hook 'turn-on-flyspell))

    ;; When to turn on flyspell-prog-mode for comments and strings in source.
    ;; (dolist (hook '(emacs-lisp-mode-hook
    ;;                 lisp-mode-hook))
    ;;   (add-hook hook #'(lambda () (flyspell-prog-mode))))

    ;; Do not emit to *Messages*.
    (setq flyspell-issue-message-flag nil)
  #+END_SRC

** Install [[http://hunspell.sourceforge.net/][=aspell=]]
   :PROPERTIES:
   :CUSTOM_ID: install-aspell
   :END:

   Install =aspell= via Homebrew:

   #+BEGIN_SRC sh
     brew install aspell --with-lang-en
   #+END_SRC

* git

  #+BEGIN_SRC emacs-lisp
    (require 'git-commit-mode)
    (require 'gitconfig-mode)
    (require 'gitignore-mode)

    (defun k20e/git-commit-mode-hook ()
      (setq fill-column 72))

    (add-hook 'git-commit-mode-hook 'k20e/git-commit-mode-hook)

    (autoload 'git-blame-mode "git-blame"
      "Minor mode for incremental blame for Git." t)

    (global-set-key (kbd "C-x v b") 'git-blame-mode)
  #+END_SRC

* highlight-parentheses

  #+BEGIN_SRC emacs-lisp
    (require 'highlight-parentheses)

    (dolist (hook '(emacs-lisp-mode-hook
                    lisp-mode-hook
                    cider-repl-mode-hook
                    clojure-mode-hook))
      (add-hook hook #'(lambda ()
                         (highlight-parentheses-mode))))
  #+END_SRC

* hyperspec

  #+BEGIN_SRC emacs-lisp
    ;; Set HyperSpec root in Dropbox.
    (defvar common-lisp-hyperspec-root
      (format "file://%s/"
              (expand-file-name "Documents/HyperSpec" k20e/dropbox-directory)))
  #+END_SRC

* ibuffer

  #+BEGIN_SRC emacs-lisp
    (require 'ibuffer)

    (defalias 'list-buffers 'ibuffer)

    (setq ibuffer-formats '((mark
                             " "
                             (modified)
                             " "
                             (name 40 40 :right :elide)
                             " "
                             (filename-and-process))
                            (mark
                             " "
                             (filename-and-process 70 70 :left :elide)
                             " "
                             name)))

    (add-hook 'ibuffer-hook (lambda () (ibuffer-switch-to-saved-filter-groups "")))
  #+END_SRC

* ido

  #+BEGIN_SRC emacs-lisp
    (require 'flx-ido)
    (require 'ido)
    (require 'ido-vertical-mode)

    (setq ido-save-directory-list-file (expand-file-name ".ido.last" k20e/dropbox-directory))
    (add-to-list 'ido-ignore-files "\\.DS_Store")

    ;; Boring arrows be gone!
    (setq ido-vertical-decorations '("\n"  ; left bracket around prospect list
                                     ""    ; right bracket around prospect list
                                     "\n"  ; separator between prospects, depends on `ido-separator`
                                     "\n▼" ; inserted at the end of a truncated list of prospects
                                     "["   ; left bracket around common match string
                                     "]"   ; right bracket around common match string
                                     " ✘"  ; no match
                                     " ✔"  ; matched
                                     " [Not readable]"
                                     " [Too big]"
                                     " ?"  ; confirm
                                     "\n"  ; left bracket around the sole remaining completion
                                     " ✔"  ; right bracket around the sole remaining completion
                                     ))

    (add-hook 'ido-minibuffer-setup-hook
              #'(lambda ()
                  "Bump up minibuffer text size and height."
                  (text-scale-set 3)
                  (setq max-mini-window-height 20)))

    ;; Avoid `ido-vertical-mode' from eating M-p.
    (setq ido-vertical-define-keys nil)

    (defun k20e/ido-setup ()
      "Setup key map and theme faces."
      (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
      (define-key ido-completion-map (kbd "C-p") 'ido-prev-match)
      (define-key ido-completion-map (kbd "<up>") 'ido-prev-match)
      (define-key ido-completion-map (kbd "<down>") 'ido-next-match)
      (define-key ido-completion-map (kbd "<left>") 'ido-vertical-prev-match)
      (define-key ido-completion-map (kbd "<right>") 'ido-vertical-next-match)

      (define-key ido-completion-map (kbd "C-h") 'delete-backward-char)

      ;; Theme!
      (let ((match (face-attribute 'font-lock-string-face :foreground))
            (highlight (face-attribute 'font-lock-keyword-face :foreground)))
        (custom-set-faces `(ido-first-match ((t (:foreground ,match))))
                          `(ido-only-match ((t (:foreground ,match))))
                          `(flx-highlight-face ((t (:foreground ,highlight
                                                    :underline nil)))))))
    (add-hook 'ido-setup-hook 'k20e/ido-setup)

    (ido-mode t)
    (ido-vertical-mode t)
    (ido-ubiquitous-mode t)
    (flx-ido-mode t)

    (setq ido-enable-flex-matching t
          ido-auto-merge-work-directories-length -1
          ido-create-new-buffer 'always
          ido-show-dot-for-dired t
          ido-max-file-prompt-width 0.2
          ido-use-faces t
          flx-ido-use-faces t)
  #+END_SRC

* IELM

  #+BEGIN_SRC emacs-lisp
    (require 'eldoc)

    (defun k20e/ielm-hook ()
      (eldoc-mode))

    (add-hook 'ielm-mode-hook 'k20e/ielm-hook)
  #+END_SRC

* isearch

  #+BEGIN_SRC emacs-lisp
    (eval-after-load "isearch"
      '(define-key isearch-mode-map (kbd "C-h") 'isearch-delete-char))
  #+END_SRC

* js-mode

  #+BEGIN_SRC emacs-lisp
    (require 'json)

    (add-to-list 'auto-mode-alist '("\\.json" . js-mode))
  #+END_SRC

* keyfreq

  #+BEGIN_SRC emacs-lisp
    (require 'keyfreq)

    (setq keyfreq-file (expand-file-name ".emacs-keyfreq" k20e/dropbox-directory)
          keyfreq-file-lock (expand-file-name ".emacs-keyfreq-lock" k20e/dropbox-directory))

    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1)
  #+END_SRC

* minibuffers

  Set =enable-recursive-minibufers= to =t= to allow minibuffers
  /within/ minibuffers.  A good use-case of this feature is described
  in [[http://www.masteringemacs.org/articles/2011/10/19/executing-shell-commands-emacs/][Executing Shell Commands in Emacs]].

  #+BEGIN_SRC emacs-lisp
    (setq enable-recursive-minibuffers t)
  #+END_SRC

* monetate-mode

  #+BEGIN_SRC emacs-lisp
    (require 'monetate-mode)

    (defun k20e/monetate-hook ()
      "Enable monetate-mode if file is in a Monetate repository."
      (if (monetate-repo-p) (monetate-mode 1)))

    (dolist (hook '(python-mode-hook js-mode-hook shell-mode-hook sql-mode))
      (add-hook hook 'k20e/monetate-hook))

    (setq monetate-notify-function 'monetate--notify-terminal-notifier
          monetate-notify-process-messages '((started . "🕐 Started…")
                                             (success . "✅ Success!")
                                             (failure . "🚫 Error")))

  #+END_SRC

* multi-term
  :PROPERTIES:
  :CUSTOM_ID: multi-term
  :END:

  Together with [[#term][term]] this sets up my terminal environment within Emacs.

  =multi-term= adds a nice shortcut for flipping between only terminal
  buffers.  It also lets me fix a big annoyance by binding =M-h= to
  =backward-kill-word= easily.

  #+BEGIN_SRC emacs-lisp
    (require 'multi-term)
    (require 'term)

    (defcustom term-bind-key-alist
        '(("C-c C-c" . term-interrupt-subjob)
          ("C-h" . term-send-backspace)
          ("C-c C-j" . term-line-mode)
          ("C-c C-k" . term-char-mode)
          ("C-p" . term-send-up)
          ("C-n" . term-send-down)
          ("C-r" . term-send-reverse-search-history)
          ("C-m" . term-send-raw)
          ("C-y" . term-send-raw)
          ("C-z" . term-stop-subjob)
          ("M-f" . term-send-forward-word)
          ("M-b" . term-send-backward-word)
          ("M-p" . previous-line)
          ("M-n" . next-line)
          ("M-d" . term-send-forward-kill-word)
          ("M-h" . term-send-backward-kill-word)
          ("M-r" . isearch-backward)
          ("M-s" . isearch-forward)
          ("M-." . completion-at-point)
          ("M-]" . multi-term-next)
          ("M-[" . multi-term-prev))
        "Custom key bindings for `multi-term'."
        :type 'alist
        :group 'multi-term)

    (defun k20e/multi-term-hook ()
      "Re-evaluate my custom key bindings."
      (custom-reevaluate-setting 'term-bind-key-alist))

    (add-hook 'term-mode-hook 'k20e/multi-term-hook)

    (defalias 'zsh 'multi-term
      "Execute `multi-term' when `zsh' is executed.
    `multi-term' will look at the environment $SHELL value to
    determine the shell to run.  I have it set to zsh.")
  #+END_SRC

  =k20e/multi-term-hook= is necessary to re-evaluate my custom key bindings
  after =multi-term= is loaded.  Otherwise it overrides my bindings with its
  bindings whenever I open a new terminal.

** Global Key Bindings

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f2>") 'multi-term)
     (global-set-key (kbd "<f11>") 'multi-term-next)
   #+END_SRC

* multiple-cursors

  #+BEGIN_SRC emacs-lisp
    (require 'multiple-cursors)

    ;; Keep preferences sync'd across machines.
    (setq mc/list-file (expand-file-name ".mc-lists.el" k20e/dropbox-directory))

    (global-set-key (kbd "M-L") 'mc/edit-lines)
    (global-set-key (kbd "C-M-.") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-M-,") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-M-<return>") 'mc/mark-all-like-this)
    (global-set-key (kbd "H-SPC") 'set-rectangular-region-anchor)

    (defun mark-current-line ()
      "Mark the current line.
    If the mark is already set simply move the point forward a single
    line.  If it is not set, set it at the beginning of the current
    line and then move the point forward a single line."
      (interactive)
      (unless mark-active
        (beginning-of-line)
        (set-mark (point)))
      (forward-line 1))

    (global-set-key (kbd "M-l") 'mark-current-line)
  #+END_SRC

* org-mode

  #+BEGIN_SRC emacs-lisp
    (require 'org)
    (require 'yasnippet)

    (defun k20e/org-mode-hook ()
      (auto-fill-mode 1)
      (org-toggle-pretty-entities)
      (visual-line-mode 0)
      (yas-minor-mode 1))

    ;; Set the org directory.
    (setq org-directory (expand-file-name "org" k20e/dropbox-directory))

    ;; MobileOrg setup.
    (require 'org-mobile)
    (setq org-mobile-inbox-for-pull (expand-file-name "flagged.org" org-directory)
          org-mobile-directory (expand-file-name "Apps/MobileOrg" k20e/dropbox-directory))
    (dolist (dir (dirs-in-dir org-directory '("." ".." ".git")))
      (add-to-list 'org-mobile-files dir))

    ;; Speeeeeeeeeed!  Move to very beginning of a headline and press "?"
    (setq org-use-speed-commands t)

    ;; "Special" `C-a' and `C-e' movement in headlines.
    (setq org-special-ctrl-a/e t)

    ;; Use completion in the current buffer for movement.
    (setq org-goto-interface 'outline-path-completion)

    ;; Display entities as UTF-8 characters.
    (add-hook 'org-mode-hook 'k20e/org-mode-hook)

    ;; org-capture.
    (setq org-default-notes-file (expand-file-name "notes.org" org-directory))

    ;; Global key binding to make storing links to files easier.
    (global-set-key (kbd "C-c l") 'org-store-link)

    ;; Use ido-completion.
    (setq org-completion-use-ido t)

    ;; Now that ido-completion is enabled, use it when jumping around.
    (setq org-outline-path-complete-in-steps nil)

    (setq org-ellipsis "…")
  #+END_SRC

** Key Bindings

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c a") 'org-agenda)
     (global-set-key (kbd "C-x c") 'org-switchb)
     (global-set-key (kbd "<f12>") 'org-agenda-list)

     (define-key org-mode-map (kbd "M-h") 'backward-kill-word)
   #+END_SRC

** Export

   #+BEGIN_SRC emacs-lisp
     (require 'htmlize)
     (require 'ox-publish)

     ;; Enable "expert" export interface.
     (setq org-export-dispatch-use-expert-ui t)

     ;; Enable Markdown export backend.
     (require 'ox-md)
     (add-to-list 'org-export-backends 'md)

     ;; Fontify _SRC blocks in org-mode buffers.
     (setq org-src-fontify-natively t)

     ;; Generate a stylesheet rather than inline CSS.
     (setq org-html-htmlize-output-type 'css)

     ;; Customize HTML export styling.
     (require 'ox-html)
     (setq org-html-head-include-default-style nil
           org-html-postamble-format '(("en" "<p class=\"author\">%a</p>
     <p class=\"date\">%C</p>
     <p class=\"creator\">%c</p>"))
           org-html-postamble t)

     (defun update-org-css ()
       "Update the `org-html-head' variable with the contents of the
     ~/.emacs.d/org.css file."
       (interactive)
       (let ((css-filename (expand-file-name "org.css" user-emacs-directory))
             (css-wrapper "<style type=\"text/css\">
     <!--/*--><![CDATA[/*><!--*/
     %s/*]]>*/-->
     </style>"))
         (setq org-html-head (format css-wrapper
                                     (file-contents-as-string css-filename)))))
     (add-hook 'org-export-before-processing-hook
               (lambda (backend) (update-org-css)))

     (setq org-html-head-extra
           "<link href='http://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css' rel='stylesheet'>")
   #+END_SRC

** Publish

   #+BEGIN_SRC emacs-lisp
     (setq org-publish-project-alist
           `(("k20e-org-files"
              :base-directory ,(expand-file-name "source" (expand-file-name "k20e" org-directory))
              :base-extension "org"
              :recursive t
              :exclude "ga.org\\|level-0.org"
              :publishing-directory ,(expand-file-name "published" (expand-file-name "k20e" org-directory))
              :publishing-function org-html-publish-to-html
              :with-planning t)
             ("k20e-static-files"
              :base-directory ,(expand-file-name "source" (expand-file-name "k20e" org-directory))
              :base-extension "png\\|ico"
              :recursive t
              :publishing-directory ,(expand-file-name "published" (expand-file-name "k20e" org-directory))
              :publishing-function org-publish-attachment)
             ("k20e"
              :components ("k20e-org-files" "k20e-static-files"))
             ("work-org-files"
              :base-directory ,(expand-file-name "work" org-directory)
              :base-extension "org"
              :publishing-directory ,(expand-file-name "published" (expand-file-name "work" org-directory))
              :publishing-function org-html-publish-to-html
              :with-planning t)
             ("work-static-files"
              :base-directory ,(expand-file-name "work" org-directory)
              :base-extension "pdf\\|csv\\|sql\\|png"
              :publishing-directory ,(expand-file-name "published" (expand-file-name "work" org-directory))
              :publishing-function org-publish-attachment)
             ("work"
              :components ("work-org-files" "work-static-files"))))
   #+END_SRC

** Babel

   Define [[http://orgmode.org/worg/org-contrib/babel/languages.html][which languages]] =org-babel= should support.

   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (org . t)))
   #+END_SRC

** TODO Items

   Automatically insert a timestamp when a task is marked =DONE=.

   #+BEGIN_SRC emacs-lisp
     (setq org-log-done t)
   #+END_SRC

   Custom keywords and faces.

   #+BEGIN_SRC emacs-lisp
     (setq org-todo-keywords '((sequence
                                "TODO(t)"
                                "STARTED(s/!)"
                                "|"
                                "DONE(d!)"
                                "CANCELED(c@)"))
           org-todo-keyword-faces '(("TODO" . org-todo)
                                    ("STARTED" . org-code)
                                    ("CANCELED" . org-ellipsis)
                                    ("DONE" . org-done)))
   #+END_SRC

** Agenda
*** Files

   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-files
           (list (expand-file-name "resolutions.org" org-directory)
                 (expand-file-name "work" org-directory)))
   #+END_SRC

*** Deadlines

   Non-nil means skip scheduling line if same entry shows because of deadline.

   In the agenda of today, an entry can show up multiple times because it is
   both scheduled and has a nearby deadline, and maybe a plain time stamp as
   well.

   When set to t, then only the deadline is shown and the fact that the entry
   is scheduled today or was scheduled previously is not shown.

   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-skip-scheduled-if-deadline-is-shown nil)
   #+END_SRC

*** List

   Default to showing only today in the agenda list.

   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-span 'day)
   #+END_SRC

** Habit

   #+BEGIN_SRC emacs-lisp
     (require 'org-habit)

     (setq org-habit-completed-glyph ?✓
           org-habit-today-glyph ?|)
   #+END_SRC

** Logging & Drawers

   Insert state change notes and time stamps into a drawer rather than simply
   "loose" after a headline.

   #+BEGIN_SRC emacs-lisp
     (setq org-log-into-drawer t)
   #+END_SRC
** Clock

   #+BEGIN_SRC emacs-lisp
     (defvar org-clock-idle-time 5)
   #+END_SRC

** Visit By Default

   #+BEGIN_SRC emacs-lisp
     (find-file (expand-file-name "resolutions.org" org-directory))
   #+END_SRC

* paredit-mode

  #+BEGIN_SRC emacs-lisp
    (autoload 'paredit-mode "paredit" nil t)

    ;; When to turn on paredit.
    (dolist (hook '(emacs-lisp-mode-hook
                    lisp-mode-hook
                    cider-repl-mode-hook))
      (add-hook hook #'(lambda nil (paredit-mode 1))))

    (eval-after-load "paredit"
      '(progn
         (define-key paredit-mode-map [?\)] 'paredit-close-parenthesis)
         (define-key paredit-mode-map [(meta ?\))]
           'paredit-close-parenthesis-and-newline)
         (define-key paredit-mode-map (kbd "C-h") 'paredit-backward-delete)))
  #+END_SRC

* Path

  #+BEGIN_SRC emacs-lisp
    (require 'exec-path-from-shell)

    ;; Fix environment issues with Emacs.app.
    (add-to-list 'exec-path-from-shell-variables "DEVBOX")
    (exec-path-from-shell-initialize)
  #+END_SRC

* powerline

  #+BEGIN_SRC emacs-lisp
    ;; (require 'powerline)
    ;; (set-default 'powerline-default-separator 'zigzag)
    ;; (powerline-default-theme)
  #+END_SRC

* python

  #+BEGIN_SRC emacs-lisp
    (require 'autopair)
    (require 'electric)
    (require 'flycheck)
    (require 'multiple-cursors)
    (require 'python)
    (require 'yasnippet)

    (defun k20e/python-mode-hook ()
      (superword-mode)
      ;; Do not drive me crazy with extra-dumb indentation!
      (setq electric-indent-inhibit t)
      (linum-mode 1)
      ;; (flycheck-mode 1)
      (setq fill-column 118
            autopair-handle-action-fns (list 'autopair-default-handle-action
                                             'autopair-python-triple-quote-action))
      (yas-minor-mode 1)
      ;; Previously:
      ;; C-M-f, C-M-b (paredit-forward/back)
      ;; C-M-n, C-M-p (forward-list/backward-list)
      ;; C-M-a, C-M-e (beginning-of-defun/end-of-defun)
      (define-key python-mode-map (kbd "M-a") 'python-nav-beginning-of-statement)
      (define-key python-mode-map (kbd "M-e") 'python-nav-end-of-statement)
      (define-key python-mode-map (kbd "M-n") 'python-nav-forward-statement)
      (define-key python-mode-map (kbd "M-p") 'python-nav-backward-statement)
      (define-key python-mode-map (kbd "C-M-f") 'python-nav-forward-sexp)
      (define-key python-mode-map (kbd "C-M-b") 'python-nav-backward-sexp)
      (define-key python-mode-map (kbd "C-M-n") 'python-nav-forward-block)
      (define-key python-mode-map (kbd "C-M-p") 'python-nav-backward-block)

      (define-key python-mode-map (kbd "C-M-.") 'mc/mark-next-like-this)
      (define-key python-mode-map (kbd "C-M-,") 'mc/mark-previous-like-this)
      (define-key python-mode-map (kbd "C-M-<return>") 'mc/mark-all-symbols-like-this))

    (add-hook 'python-mode-hook 'k20e/python-mode-hook)
  #+END_SRC

** IPython

   #+BEGIN_SRC emacs-lisp
     (setq
      python-shell-interpreter "ipython"
      python-shell-interpreter-args ""
      python-shell-prompt-regexp "In \\[[0-9]+\\]: "
      python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
      python-shell-completion-setup-code "from IPython.core.completerlib import module_completion"
      python-shell-completion-module-string-code "';'.join(module_completion('''%s'''))\n"
      python-shell-completion-string-code "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
   #+END_SRC

* recentf

  #+BEGIN_SRC emacs-lisp
    (require 'recentf)

    (setq recentf-save-file (expand-file-name ".recentf" k20e/dropbox-directory)
          recentf-max-saved-items 250)
    (recentf-mode 1)

    ;;; Adapted from http://emacsredux.com/blog/2013/04/05/recently-visited-files
    (defun recentf-ido-find-file ()
      "Find a recently opened file with ido."
      (interactive)
      (let ((file (ido-completing-read "Find recent file: " recentf-list nil t)))
        (if file (find-file file))))

    (global-set-key (kbd "C-x C-r") 'recentf-ido-find-file)
  #+END_SRC

* savehist

  #+BEGIN_SRC emacs-lisp
    ;; Save minibuffer history.
    (require 'savehist)

    (setq savehist-file (expand-file-name ".savehist" k20e/dropbox-directory))
    (savehist-mode)
  #+END_SRC

* =*scratch*=

  Begin with an empty =*scratch*= file.

  #+BEGIN_SRC emacs-lisp
    (setq initial-scratch-message nil)
  #+END_SRC

  Set it to Emacs Lisp mode.

  #+BEGIN_SRC emacs-lisp
    (with-current-buffer (get-buffer-create "*scratch*")
      (emacs-lisp-mode))
  #+END_SRC

** Quickly create new scratch buffers

   With a preset list of major modes that I find often need scratch
   pads for.

   #+BEGIN_SRC emacs-lisp
     (require 'ido)

     (defconst k20e/scratch-buffer-modes
       '(emacs-lisp-mode
         fundamental-mode
         javascript-mode
         sql-mode
         text-mode)
       "Common major modes to create scratch buffers for.")

     (defun k20e/scratch-buffer ()
       "Generate a new scratch buffer.
     Choose from `k20e/scratch-buffer-modes' list of major modes to
     enable in the newly created scratch buffer and switch to it."
       (interactive)
       (let ((mode (read (ido-completing-read "New *scratch* buffer with mode: "
                                              (mapcar (lambda (el) (format "%s" el))
                                                      k20e/scratch-buffer-modes)))))
         (switch-to-buffer (generate-new-buffer (format "*scratch-%s*" mode)))
         (funcall mode)))
   #+END_SRC

   Bind it globally.

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f10>") 'k20e/scratch-buffer)
   #+END_SRC

* smex

  #+BEGIN_SRC emacs-lisp
    (require 'smex)
    (smex-initialize)

    ;; Replace execute-extended-command binding with smex.
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)

    ;; Keep execute-extended-command at hand just in case.
    (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

    ;; Share smex history across my machines.
    (setq smex-save-file (expand-file-name ".smex-items" k20e/dropbox-directory))
  #+END_SRC

* sql-mode

  #+BEGIN_SRC emacs-lisp
    (require 'sql)

    (defun k20e/sql-mode-hook ()
      (setq sql-product 'mysql)
      (sql-highlight-mysql-keywords))

    (add-hook 'sql-mode-hook 'k20e/sql-mode-hook)
  #+END_SRC

* server

  #+BEGIN_SRC emacs-lisp
    ;; Start the Emacs server.
    (require 'server)

    (unless (server-running-p)
      (server-start))
  #+END_SRC

* term
  :PROPERTIES:
  :CUSTOM_ID: term
  :END:

  Together with [[#multi-term][multi-term]] this sets up my terminal environment within Emacs.

  #+BEGIN_SRC emacs-lisp
    (require 'term)

    (defun k20e/term-hook ()
      "Configure terminal mode.
    `autopair-mode' interferes with `term-send-raw' bounding on
    `RET' so it is disabled."
      (if (fboundp 'autopair-mode) (autopair-mode -1)))

    (add-hook 'term-mode-hook 'k20e/term-hook)
  #+END_SRC

** Key Bindings

   =term-raw-map= is used in /char/ mode.

   #+BEGIN_SRC emacs-lisp
     (require 'smex)

     (define-key term-raw-map (kbd "M-x") 'smex)
     (define-key term-raw-map (kbd "M-h") 'backward-kill-word)
   #+END_SRC

   =term-mode-map= is used in /line/ mode.

   #+BEGIN_SRC emacs-lisp
     (define-key term-mode-map (kbd "M-x") 'smex)
   #+END_SRC

* text-mode

  #+BEGIN_SRC emacs-lisp
    (defun k20e/text-mode-hook ()
      (auto-fill-mode 1))

    (add-hook 'text-mode-hook 'k20e/text-mode-hook)
  #+END_SRC

* tramp

  Fix =ControlPath too long= errors due to OS X pitching a [[https://lists.macosforge.org/pipermail/macports-tickets/2011-June/084295.html][long temporary
  directory]] to =ssh=.

  Unfortunately, setting this is blowing up the =server-start= which can no
  longer find the socket stored in the original =TMPDIR= value.

  #+BEGIN_SRC emacs-lisp
    ;; (setenv "TMPDIR" "/tmp")
  #+END_SRC

  Do not inline copy files.  This is to avoid =File exists, but cannot be
  read= errors.

  #+BEGIN_SRC emacs-lisp
    (setq-default tramp-copy-size-limit -1)
  #+END_SRC

** Debugging

   #+BEGIN_SRC emacs-lisp
     ;; (setq tramp-verbose 6)
   #+END_SRC

   Will create a detailed log buffer.

* uniquify

  Name multiple identical buffer names in a sensible manner.

  #+BEGIN_SRC emacs-lisp
    (require 'uniquify)

    (setq uniquify-buffer-name-style 'forward)
  #+END_SRC

* virtualenvwrapper

  #+BEGIN_SRC emacs-lisp
    (require 'virtualenvwrapper)

    (venv-initialize-interactive-shells)
  #+END_SRC

** TODO [[https://github.com/porterjamesj/virtualenvwrapper.el#automatically-activating-a-virtualenv-in-a-particular-project][Automatically activate]]

* windmove

  #+BEGIN_SRC emacs-lisp
    (require 'windmove)

    (windmove-default-keybindings 'hyper)
    (setq windmove-wrap-around t)
  #+END_SRC

* winner-mode

  Remember window configurations.

  #+BEGIN_SRC emacs-lisp
    (require 'winner)

    (winner-mode)
  #+END_SRC

* whitespace

  Take care of some whitespace issues.

  - Kill trailing whitespace on save
  - Insert a new line at the end of file on save
  - Prefer =space= over =tab=

  #+BEGIN_SRC emacs-lisp
    (add-hook 'before-save-hook 'delete-trailing-whitespace)

    (set-default 'indent-tabs-mode nil)

    (setq require-final-newline t
          mode-require-final-newline t)
  #+END_SRC

* writeroom-mode

  Hack in a scale adjustment and alter width to fit.  There's likely a
  much better way to accomplish this.

  #+BEGIN_SRC emacs-lisp
    (require 'face-remap)
    (require 'writeroom-mode)

    (setq writeroom-width 126)

    (defvar k20e/writeroom-text-scale-amount 0
      "Text scale amount for `writeroom-mode'.")

    (defun k20e/writeroom-text-scale (arg)
      (require 'face-remap)
      (if arg (progn
                (set (make-local-variable 'k20e/writeroom-text-scale-amount)
                     text-scale-mode-amount)
                (text-scale-set 3))
        (text-scale-set
         (if (boundp 'k20e/writeroom-text-scale-amount)
             k20e/writeroom-text-scale-amount 0))))

    (add-to-list 'writeroom-global-effects 'k20e/writeroom-text-scale)
  #+END_SRC

* yaml-mode

  #+BEGIN_SRC emacs-lisp
    (require 'yaml-mode)

    (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
  #+END_SRC

* yasnippet

  #+BEGIN_SRC emacs-lisp
    (require 'yasnippet)

    (yas-reload-all)
  #+END_SRC
